/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pll.employee.directory.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.pll.employee.directory.model.EmployeeDirectory;
import com.pll.employee.directory.model.EmployeeDirectoryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmployeeDirectory service. Represents a row in the &quot;pll_EmployeeDirectory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeDirectoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeDirectoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeDirectoryImpl
 * @generated
 */
public class EmployeeDirectoryModelImpl
	extends BaseModelImpl<EmployeeDirectory> implements EmployeeDirectoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee directory model instance should use the <code>EmployeeDirectory</code> interface instead.
	 */
	public static final String TABLE_NAME = "pll_EmployeeDirectory";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"employeeName", Types.VARCHAR}, {"designation", Types.VARCHAR},
		{"extentionNumber", Types.VARCHAR}, {"directNumber", Types.VARCHAR},
		{"mobileNumber", Types.VARCHAR}, {"alternateNumber", Types.VARCHAR},
		{"residenceNumber", Types.VARCHAR}, {"faxNumber", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"department", Types.VARCHAR},
		{"bloodGroup", Types.VARCHAR}, {"fileEntryId", Types.BIGINT},
		{"presentGrade", Types.VARCHAR}, {"passportNumber", Types.VARCHAR},
		{"passportValidity", Types.TIMESTAMP}, {"anniversary", Types.TIMESTAMP},
		{"uanNumber", Types.VARCHAR}, {"aboutMe", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("employeeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extentionNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("directNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alternateNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("residenceNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("faxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bloodGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("presentGrade", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passportNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passportValidity", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("anniversary", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("uanNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("aboutMe", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pll_EmployeeDirectory (employeeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,employeeName VARCHAR(75) null,designation VARCHAR(75) null,extentionNumber VARCHAR(75) null,directNumber VARCHAR(75) null,mobileNumber VARCHAR(75) null,alternateNumber VARCHAR(75) null,residenceNumber VARCHAR(75) null,faxNumber VARCHAR(75) null,location VARCHAR(75) null,department VARCHAR(75) null,bloodGroup VARCHAR(75) null,fileEntryId LONG,presentGrade VARCHAR(75) null,passportNumber VARCHAR(75) null,passportValidity DATE null,anniversary DATE null,uanNumber VARCHAR(75) null,aboutMe VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table pll_EmployeeDirectory";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employeeDirectory.employeeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pll_EmployeeDirectory.employeeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmployeeDirectoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeDirectory.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeDirectory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmployeeDirectory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmployeeDirectory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeDirectory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EmployeeDirectory)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmployeeDirectory, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmployeeDirectory, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmployeeDirectory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmployeeDirectory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmployeeDirectory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EmployeeDirectory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmployeeDirectory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmployeeDirectory, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EmployeeDirectory, Object>>();
		Map<String, BiConsumer<EmployeeDirectory, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EmployeeDirectory, ?>>();

		attributeGetterFunctions.put(
			"employeeId", EmployeeDirectory::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<EmployeeDirectory, Long>)
				EmployeeDirectory::setEmployeeId);
		attributeGetterFunctions.put("groupId", EmployeeDirectory::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EmployeeDirectory, Long>)EmployeeDirectory::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EmployeeDirectory::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmployeeDirectory, Long>)
				EmployeeDirectory::setCompanyId);
		attributeGetterFunctions.put("userId", EmployeeDirectory::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EmployeeDirectory, Long>)EmployeeDirectory::setUserId);
		attributeGetterFunctions.put(
			"createDate", EmployeeDirectory::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmployeeDirectory, Date>)
				EmployeeDirectory::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmployeeDirectory::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmployeeDirectory, Date>)
				EmployeeDirectory::setModifiedDate);
		attributeGetterFunctions.put(
			"employeeName", EmployeeDirectory::getEmployeeName);
		attributeSetterBiConsumers.put(
			"employeeName",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setEmployeeName);
		attributeGetterFunctions.put(
			"designation", EmployeeDirectory::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setDesignation);
		attributeGetterFunctions.put(
			"extentionNumber", EmployeeDirectory::getExtentionNumber);
		attributeSetterBiConsumers.put(
			"extentionNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setExtentionNumber);
		attributeGetterFunctions.put(
			"directNumber", EmployeeDirectory::getDirectNumber);
		attributeSetterBiConsumers.put(
			"directNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setDirectNumber);
		attributeGetterFunctions.put(
			"mobileNumber", EmployeeDirectory::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setMobileNumber);
		attributeGetterFunctions.put(
			"alternateNumber", EmployeeDirectory::getAlternateNumber);
		attributeSetterBiConsumers.put(
			"alternateNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setAlternateNumber);
		attributeGetterFunctions.put(
			"residenceNumber", EmployeeDirectory::getResidenceNumber);
		attributeSetterBiConsumers.put(
			"residenceNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setResidenceNumber);
		attributeGetterFunctions.put(
			"faxNumber", EmployeeDirectory::getFaxNumber);
		attributeSetterBiConsumers.put(
			"faxNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setFaxNumber);
		attributeGetterFunctions.put(
			"location", EmployeeDirectory::getLocation);
		attributeSetterBiConsumers.put(
			"location",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setLocation);
		attributeGetterFunctions.put(
			"department", EmployeeDirectory::getDepartment);
		attributeSetterBiConsumers.put(
			"department",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setDepartment);
		attributeGetterFunctions.put(
			"bloodGroup", EmployeeDirectory::getBloodGroup);
		attributeSetterBiConsumers.put(
			"bloodGroup",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setBloodGroup);
		attributeGetterFunctions.put(
			"fileEntryId", EmployeeDirectory::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<EmployeeDirectory, Long>)
				EmployeeDirectory::setFileEntryId);
		attributeGetterFunctions.put(
			"presentGrade", EmployeeDirectory::getPresentGrade);
		attributeSetterBiConsumers.put(
			"presentGrade",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setPresentGrade);
		attributeGetterFunctions.put(
			"passportNumber", EmployeeDirectory::getPassportNumber);
		attributeSetterBiConsumers.put(
			"passportNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setPassportNumber);
		attributeGetterFunctions.put(
			"passportValidity", EmployeeDirectory::getPassportValidity);
		attributeSetterBiConsumers.put(
			"passportValidity",
			(BiConsumer<EmployeeDirectory, Date>)
				EmployeeDirectory::setPassportValidity);
		attributeGetterFunctions.put(
			"anniversary", EmployeeDirectory::getAnniversary);
		attributeSetterBiConsumers.put(
			"anniversary",
			(BiConsumer<EmployeeDirectory, Date>)
				EmployeeDirectory::setAnniversary);
		attributeGetterFunctions.put(
			"uanNumber", EmployeeDirectory::getUanNumber);
		attributeSetterBiConsumers.put(
			"uanNumber",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setUanNumber);
		attributeGetterFunctions.put("aboutMe", EmployeeDirectory::getAboutMe);
		attributeSetterBiConsumers.put(
			"aboutMe",
			(BiConsumer<EmployeeDirectory, String>)
				EmployeeDirectory::setAboutMe);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("employeeId"));
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getEmployeeName() {
		if (_employeeName == null) {
			return "";
		}
		else {
			return _employeeName;
		}
	}

	@Override
	public void setEmployeeName(String employeeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeName = employeeName;
	}

	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	@Override
	public String getExtentionNumber() {
		if (_extentionNumber == null) {
			return "";
		}
		else {
			return _extentionNumber;
		}
	}

	@Override
	public void setExtentionNumber(String extentionNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_extentionNumber = extentionNumber;
	}

	@Override
	public String getDirectNumber() {
		if (_directNumber == null) {
			return "";
		}
		else {
			return _directNumber;
		}
	}

	@Override
	public void setDirectNumber(String directNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_directNumber = directNumber;
	}

	@Override
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return "";
		}
		else {
			return _mobileNumber;
		}
	}

	@Override
	public void setMobileNumber(String mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@Override
	public String getAlternateNumber() {
		if (_alternateNumber == null) {
			return "";
		}
		else {
			return _alternateNumber;
		}
	}

	@Override
	public void setAlternateNumber(String alternateNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_alternateNumber = alternateNumber;
	}

	@Override
	public String getResidenceNumber() {
		if (_residenceNumber == null) {
			return "";
		}
		else {
			return _residenceNumber;
		}
	}

	@Override
	public void setResidenceNumber(String residenceNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_residenceNumber = residenceNumber;
	}

	@Override
	public String getFaxNumber() {
		if (_faxNumber == null) {
			return "";
		}
		else {
			return _faxNumber;
		}
	}

	@Override
	public void setFaxNumber(String faxNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_faxNumber = faxNumber;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	@Override
	public String getBloodGroup() {
		if (_bloodGroup == null) {
			return "";
		}
		else {
			return _bloodGroup;
		}
	}

	@Override
	public void setBloodGroup(String bloodGroup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bloodGroup = bloodGroup;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileEntryId = fileEntryId;
	}

	@Override
	public String getPresentGrade() {
		if (_presentGrade == null) {
			return "";
		}
		else {
			return _presentGrade;
		}
	}

	@Override
	public void setPresentGrade(String presentGrade) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_presentGrade = presentGrade;
	}

	@Override
	public String getPassportNumber() {
		if (_passportNumber == null) {
			return "";
		}
		else {
			return _passportNumber;
		}
	}

	@Override
	public void setPassportNumber(String passportNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passportNumber = passportNumber;
	}

	@Override
	public Date getPassportValidity() {
		return _passportValidity;
	}

	@Override
	public void setPassportValidity(Date passportValidity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_passportValidity = passportValidity;
	}

	@Override
	public Date getAnniversary() {
		return _anniversary;
	}

	@Override
	public void setAnniversary(Date anniversary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_anniversary = anniversary;
	}

	@Override
	public String getUanNumber() {
		if (_uanNumber == null) {
			return "";
		}
		else {
			return _uanNumber;
		}
	}

	@Override
	public void setUanNumber(String uanNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uanNumber = uanNumber;
	}

	@Override
	public String getAboutMe() {
		if (_aboutMe == null) {
			return "";
		}
		else {
			return _aboutMe;
		}
	}

	@Override
	public void setAboutMe(String aboutMe) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aboutMe = aboutMe;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmployeeDirectory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeDirectory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmployeeDirectory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeDirectoryImpl employeeDirectoryImpl =
			new EmployeeDirectoryImpl();

		employeeDirectoryImpl.setEmployeeId(getEmployeeId());
		employeeDirectoryImpl.setGroupId(getGroupId());
		employeeDirectoryImpl.setCompanyId(getCompanyId());
		employeeDirectoryImpl.setUserId(getUserId());
		employeeDirectoryImpl.setCreateDate(getCreateDate());
		employeeDirectoryImpl.setModifiedDate(getModifiedDate());
		employeeDirectoryImpl.setEmployeeName(getEmployeeName());
		employeeDirectoryImpl.setDesignation(getDesignation());
		employeeDirectoryImpl.setExtentionNumber(getExtentionNumber());
		employeeDirectoryImpl.setDirectNumber(getDirectNumber());
		employeeDirectoryImpl.setMobileNumber(getMobileNumber());
		employeeDirectoryImpl.setAlternateNumber(getAlternateNumber());
		employeeDirectoryImpl.setResidenceNumber(getResidenceNumber());
		employeeDirectoryImpl.setFaxNumber(getFaxNumber());
		employeeDirectoryImpl.setLocation(getLocation());
		employeeDirectoryImpl.setDepartment(getDepartment());
		employeeDirectoryImpl.setBloodGroup(getBloodGroup());
		employeeDirectoryImpl.setFileEntryId(getFileEntryId());
		employeeDirectoryImpl.setPresentGrade(getPresentGrade());
		employeeDirectoryImpl.setPassportNumber(getPassportNumber());
		employeeDirectoryImpl.setPassportValidity(getPassportValidity());
		employeeDirectoryImpl.setAnniversary(getAnniversary());
		employeeDirectoryImpl.setUanNumber(getUanNumber());
		employeeDirectoryImpl.setAboutMe(getAboutMe());

		employeeDirectoryImpl.resetOriginalValues();

		return employeeDirectoryImpl;
	}

	@Override
	public EmployeeDirectory cloneWithOriginalValues() {
		EmployeeDirectoryImpl employeeDirectoryImpl =
			new EmployeeDirectoryImpl();

		employeeDirectoryImpl.setEmployeeId(
			this.<Long>getColumnOriginalValue("employeeId"));
		employeeDirectoryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		employeeDirectoryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		employeeDirectoryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		employeeDirectoryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		employeeDirectoryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		employeeDirectoryImpl.setEmployeeName(
			this.<String>getColumnOriginalValue("employeeName"));
		employeeDirectoryImpl.setDesignation(
			this.<String>getColumnOriginalValue("designation"));
		employeeDirectoryImpl.setExtentionNumber(
			this.<String>getColumnOriginalValue("extentionNumber"));
		employeeDirectoryImpl.setDirectNumber(
			this.<String>getColumnOriginalValue("directNumber"));
		employeeDirectoryImpl.setMobileNumber(
			this.<String>getColumnOriginalValue("mobileNumber"));
		employeeDirectoryImpl.setAlternateNumber(
			this.<String>getColumnOriginalValue("alternateNumber"));
		employeeDirectoryImpl.setResidenceNumber(
			this.<String>getColumnOriginalValue("residenceNumber"));
		employeeDirectoryImpl.setFaxNumber(
			this.<String>getColumnOriginalValue("faxNumber"));
		employeeDirectoryImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		employeeDirectoryImpl.setDepartment(
			this.<String>getColumnOriginalValue("department"));
		employeeDirectoryImpl.setBloodGroup(
			this.<String>getColumnOriginalValue("bloodGroup"));
		employeeDirectoryImpl.setFileEntryId(
			this.<Long>getColumnOriginalValue("fileEntryId"));
		employeeDirectoryImpl.setPresentGrade(
			this.<String>getColumnOriginalValue("presentGrade"));
		employeeDirectoryImpl.setPassportNumber(
			this.<String>getColumnOriginalValue("passportNumber"));
		employeeDirectoryImpl.setPassportValidity(
			this.<Date>getColumnOriginalValue("passportValidity"));
		employeeDirectoryImpl.setAnniversary(
			this.<Date>getColumnOriginalValue("anniversary"));
		employeeDirectoryImpl.setUanNumber(
			this.<String>getColumnOriginalValue("uanNumber"));
		employeeDirectoryImpl.setAboutMe(
			this.<String>getColumnOriginalValue("aboutMe"));

		return employeeDirectoryImpl;
	}

	@Override
	public int compareTo(EmployeeDirectory employeeDirectory) {
		long primaryKey = employeeDirectory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmployeeDirectory)) {
			return false;
		}

		EmployeeDirectory employeeDirectory = (EmployeeDirectory)object;

		long primaryKey = employeeDirectory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeDirectory> toCacheModel() {
		EmployeeDirectoryCacheModel employeeDirectoryCacheModel =
			new EmployeeDirectoryCacheModel();

		employeeDirectoryCacheModel.employeeId = getEmployeeId();

		employeeDirectoryCacheModel.groupId = getGroupId();

		employeeDirectoryCacheModel.companyId = getCompanyId();

		employeeDirectoryCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeDirectoryCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeDirectoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeDirectoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeDirectoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeDirectoryCacheModel.employeeName = getEmployeeName();

		String employeeName = employeeDirectoryCacheModel.employeeName;

		if ((employeeName != null) && (employeeName.length() == 0)) {
			employeeDirectoryCacheModel.employeeName = null;
		}

		employeeDirectoryCacheModel.designation = getDesignation();

		String designation = employeeDirectoryCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			employeeDirectoryCacheModel.designation = null;
		}

		employeeDirectoryCacheModel.extentionNumber = getExtentionNumber();

		String extentionNumber = employeeDirectoryCacheModel.extentionNumber;

		if ((extentionNumber != null) && (extentionNumber.length() == 0)) {
			employeeDirectoryCacheModel.extentionNumber = null;
		}

		employeeDirectoryCacheModel.directNumber = getDirectNumber();

		String directNumber = employeeDirectoryCacheModel.directNumber;

		if ((directNumber != null) && (directNumber.length() == 0)) {
			employeeDirectoryCacheModel.directNumber = null;
		}

		employeeDirectoryCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = employeeDirectoryCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			employeeDirectoryCacheModel.mobileNumber = null;
		}

		employeeDirectoryCacheModel.alternateNumber = getAlternateNumber();

		String alternateNumber = employeeDirectoryCacheModel.alternateNumber;

		if ((alternateNumber != null) && (alternateNumber.length() == 0)) {
			employeeDirectoryCacheModel.alternateNumber = null;
		}

		employeeDirectoryCacheModel.residenceNumber = getResidenceNumber();

		String residenceNumber = employeeDirectoryCacheModel.residenceNumber;

		if ((residenceNumber != null) && (residenceNumber.length() == 0)) {
			employeeDirectoryCacheModel.residenceNumber = null;
		}

		employeeDirectoryCacheModel.faxNumber = getFaxNumber();

		String faxNumber = employeeDirectoryCacheModel.faxNumber;

		if ((faxNumber != null) && (faxNumber.length() == 0)) {
			employeeDirectoryCacheModel.faxNumber = null;
		}

		employeeDirectoryCacheModel.location = getLocation();

		String location = employeeDirectoryCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			employeeDirectoryCacheModel.location = null;
		}

		employeeDirectoryCacheModel.department = getDepartment();

		String department = employeeDirectoryCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			employeeDirectoryCacheModel.department = null;
		}

		employeeDirectoryCacheModel.bloodGroup = getBloodGroup();

		String bloodGroup = employeeDirectoryCacheModel.bloodGroup;

		if ((bloodGroup != null) && (bloodGroup.length() == 0)) {
			employeeDirectoryCacheModel.bloodGroup = null;
		}

		employeeDirectoryCacheModel.fileEntryId = getFileEntryId();

		employeeDirectoryCacheModel.presentGrade = getPresentGrade();

		String presentGrade = employeeDirectoryCacheModel.presentGrade;

		if ((presentGrade != null) && (presentGrade.length() == 0)) {
			employeeDirectoryCacheModel.presentGrade = null;
		}

		employeeDirectoryCacheModel.passportNumber = getPassportNumber();

		String passportNumber = employeeDirectoryCacheModel.passportNumber;

		if ((passportNumber != null) && (passportNumber.length() == 0)) {
			employeeDirectoryCacheModel.passportNumber = null;
		}

		Date passportValidity = getPassportValidity();

		if (passportValidity != null) {
			employeeDirectoryCacheModel.passportValidity =
				passportValidity.getTime();
		}
		else {
			employeeDirectoryCacheModel.passportValidity = Long.MIN_VALUE;
		}

		Date anniversary = getAnniversary();

		if (anniversary != null) {
			employeeDirectoryCacheModel.anniversary = anniversary.getTime();
		}
		else {
			employeeDirectoryCacheModel.anniversary = Long.MIN_VALUE;
		}

		employeeDirectoryCacheModel.uanNumber = getUanNumber();

		String uanNumber = employeeDirectoryCacheModel.uanNumber;

		if ((uanNumber != null) && (uanNumber.length() == 0)) {
			employeeDirectoryCacheModel.uanNumber = null;
		}

		employeeDirectoryCacheModel.aboutMe = getAboutMe();

		String aboutMe = employeeDirectoryCacheModel.aboutMe;

		if ((aboutMe != null) && (aboutMe.length() == 0)) {
			employeeDirectoryCacheModel.aboutMe = null;
		}

		return employeeDirectoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmployeeDirectory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmployeeDirectory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmployeeDirectory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EmployeeDirectory)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmployeeDirectory>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EmployeeDirectory.class, ModelWrapper.class);

	}

	private long _employeeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _employeeName;
	private String _designation;
	private String _extentionNumber;
	private String _directNumber;
	private String _mobileNumber;
	private String _alternateNumber;
	private String _residenceNumber;
	private String _faxNumber;
	private String _location;
	private String _department;
	private String _bloodGroup;
	private long _fileEntryId;
	private String _presentGrade;
	private String _passportNumber;
	private Date _passportValidity;
	private Date _anniversary;
	private String _uanNumber;
	private String _aboutMe;

	public <T> T getColumnValue(String columnName) {
		Function<EmployeeDirectory, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmployeeDirectory)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("employeeName", _employeeName);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("extentionNumber", _extentionNumber);
		_columnOriginalValues.put("directNumber", _directNumber);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("alternateNumber", _alternateNumber);
		_columnOriginalValues.put("residenceNumber", _residenceNumber);
		_columnOriginalValues.put("faxNumber", _faxNumber);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("bloodGroup", _bloodGroup);
		_columnOriginalValues.put("fileEntryId", _fileEntryId);
		_columnOriginalValues.put("presentGrade", _presentGrade);
		_columnOriginalValues.put("passportNumber", _passportNumber);
		_columnOriginalValues.put("passportValidity", _passportValidity);
		_columnOriginalValues.put("anniversary", _anniversary);
		_columnOriginalValues.put("uanNumber", _uanNumber);
		_columnOriginalValues.put("aboutMe", _aboutMe);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("employeeName", 64L);

		columnBitmasks.put("designation", 128L);

		columnBitmasks.put("extentionNumber", 256L);

		columnBitmasks.put("directNumber", 512L);

		columnBitmasks.put("mobileNumber", 1024L);

		columnBitmasks.put("alternateNumber", 2048L);

		columnBitmasks.put("residenceNumber", 4096L);

		columnBitmasks.put("faxNumber", 8192L);

		columnBitmasks.put("location", 16384L);

		columnBitmasks.put("department", 32768L);

		columnBitmasks.put("bloodGroup", 65536L);

		columnBitmasks.put("fileEntryId", 131072L);

		columnBitmasks.put("presentGrade", 262144L);

		columnBitmasks.put("passportNumber", 524288L);

		columnBitmasks.put("passportValidity", 1048576L);

		columnBitmasks.put("anniversary", 2097152L);

		columnBitmasks.put("uanNumber", 4194304L);

		columnBitmasks.put("aboutMe", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmployeeDirectory _escapedModel;

}